package com.example.apptemplate.payment

import androidx.lifecycle.ViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow


class PayStackPaymentViewModel : ViewModel() {
    
    private var _phoneNumber = MutableStateFlow("")
    val phoneNumber : StateFlow<String> = _phoneNumber

    private var _amount = MutableStateFlow(1.00)
    val amount : StateFlow<Double> = _amount

    private var _reference = MutableStateFlow("")
    val reference : StateFlow<String> = _reference

    private var _email = MutableStateFlow("")
    val email : StateFlow<String> = _email

    fun updatePhoneNumber(newPhoneNumber: String) {
        _phoneNumber.value = newPhoneNumber
    }

    fun updateAmount(newAmount: Double) {
        _amount.value = newAmount
    }

    fun updateReference(newReference: String) {
        _reference.value = newReference
    }

    fun updateEmail(newEmail: String) {
        _email.value = newEmail
    }
}

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.FormBody

suspend fun initiatePayment(email: String, amount: Int): String? {
    val client = OkHttpClient()

    val requestBody = FormBody.Builder()
        .add("email", email)
        .add("amount", amount.toString())
        .build()

    val request = Request.Builder()
        .url("http://localhost:3000/create-payment") // Your server URL
        .post(requestBody)
        .addHeader("Content-Type", "application/json")
        .build()

    return withContext(Dispatchers.IO) {
        try {
            val response = client.newCall(request).execute()
            if (response.isSuccessful) {
                val responseBody = response.body?.string()
                // Parse the JSON response to get the authorization_url
                responseBody
            } else {
                null
            }
        } catch (e: Exception) {
            e.printStackTrace()
            null
        }
    }
}

data class PaymentResponse(
    val status: Boolean,
    val message: String,
    val data: PaymentData
)

data class PaymentData(
    val authorizationUrl: String,
    val accessCode: String,
    val reference: String
)

